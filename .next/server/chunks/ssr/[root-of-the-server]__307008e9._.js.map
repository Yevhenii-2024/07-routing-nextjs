{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/evgenii/Desktop/Projects/React/next/07-routing-nextjs/lib/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Note } from '@/types/note';\n\nconst API_KEY = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;\n\ninterface NotesResponse {\n\tnotes: Note[];\n\ttotalPages: number;\n}\n\nexport interface CreateNoteValues {\n\ttitle: string;\n\tcontent?: string;\n\ttag: 'Work' | 'Personal' | 'Meeting' | 'Shopping' | 'Todo';\n}\n\ninterface SearchParams {\n\tpage: number;\n\tperPage: number;\n\tsearch?: string;\n\ttag?: string;\n}\n\naxios.defaults.baseURL = 'https://notehub-public.goit.study/api';\naxios.defaults.headers.common['Authorization'] = `Bearer ${API_KEY}`;\n\nexport async function fetchNotes(search: string, page: number, tag?: string ): Promise<NotesResponse> {\n\tconst perPage = 12;\n\tconst params: SearchParams = { page, perPage };\n\n\tif (search) params.search = search;\n\tif (tag) params.tag = tag;\n\n\tconst res = await axios.get<NotesResponse>('/notes', {\n\t\tparams,\n\t});\n\n\treturn res.data;\n}\n\nexport async function createNote({ title, content, tag }: CreateNoteValues): Promise<Note> {\n\tconst res = await axios.post<Note>('/notes', {\n\t\ttitle,\n\t\tcontent,\n\t\ttag,\n\t});\n\n\treturn res.data;\n}\n\nexport async function deleteNote(id: number): Promise<Note> {\n\tconst res = await axios.delete<Note>(`/notes/${id}`);\n\treturn res.data;\n}\n\nexport async function fetchNoteById(id: number): Promise<Note> {\n\tconst res = await axios.get<Note>(`/notes/${id}`);\n\treturn res.data;\n}"],"names":[],"mappings":";;;;;;AAAA;;AAGA,MAAM;AAoBN,qIAAA,CAAA,UAAK,CAAC,QAAQ,CAAC,OAAO,GAAG;AACzB,qIAAA,CAAA,UAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,SAAS;AAE7D,eAAe,WAAW,MAAc,EAAE,IAAY,EAAE,GAAY;IAC1E,MAAM,UAAU;IAChB,MAAM,SAAuB;QAAE;QAAM;IAAQ;IAE7C,IAAI,QAAQ,OAAO,MAAM,GAAG;IAC5B,IAAI,KAAK,OAAO,GAAG,GAAG;IAEtB,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAgB,UAAU;QACpD;IACD;IAEA,OAAO,IAAI,IAAI;AAChB;AAEO,eAAe,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAoB;IACzE,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAO,UAAU;QAC5C;QACA;QACA;IACD;IAEA,OAAO,IAAI,IAAI;AAChB;AAEO,eAAe,WAAW,EAAU;IAC1C,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAO,CAAC,OAAO,EAAE,IAAI;IACnD,OAAO,IAAI,IAAI;AAChB;AAEO,eAAe,cAAc,EAAU;IAC7C,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAO,CAAC,OAAO,EAAE,IAAI;IAChD,OAAO,IAAI,IAAI;AAChB","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/evgenii/Desktop/Projects/React/next/07-routing-nextjs/app/notes/Notes.client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/Notes.client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/Notes.client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///Users/evgenii/Desktop/Projects/React/next/07-routing-nextjs/app/notes/Notes.client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/notes/Notes.client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/notes/Notes.client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///Users/evgenii/Desktop/Projects/React/next/07-routing-nextjs/app/notes/page.tsx"],"sourcesContent":["import { fetchNotes } from '@/lib/api';\nimport { QueryClient, HydrationBoundary, dehydrate } from '@tanstack/react-query';\nimport NotesClient from './Notes.client';\nimport { Note } from '@/types/note';\n\nexport default async function Notes() {\n    const queryClient = new QueryClient();\n    const initialQuery: string = '';\n    const initialPage: number = 1;\n\n\n    await queryClient.prefetchQuery({\n        queryKey: ['notes', initialQuery, initialPage],\n        queryFn: () => fetchNotes(initialQuery, initialPage)\n    });\n\n    const initialData = queryClient.getQueryData(['notes', initialQuery, initialPage]) as {\n        notes: Note[];\n        totalPages: number;\n    }\n\n    return (\n        <HydrationBoundary state={dehydrate(queryClient)}>\n            <NotesClient query={initialQuery} page={initialPage} initialData={initialData} />\n        </HydrationBoundary>\n    )\n}\n\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AAAA;AACA;;;;;AAGe,eAAe;IAC1B,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW;IACnC,MAAM,eAAuB;IAC7B,MAAM,cAAsB;IAG5B,MAAM,YAAY,aAAa,CAAC;QAC5B,UAAU;YAAC;YAAS;YAAc;SAAY;QAC9C,SAAS,IAAM,CAAA,GAAA,0GAAA,CAAA,aAAU,AAAD,EAAE,cAAc;IAC5C;IAEA,MAAM,cAAc,YAAY,YAAY,CAAC;QAAC;QAAS;QAAc;KAAY;IAKjF,qBACI,8OAAC,oLAAA,CAAA,oBAAiB;QAAC,OAAO,CAAA,GAAA,2KAAA,CAAA,YAAS,AAAD,EAAE;kBAChC,cAAA,8OAAC,gIAAA,CAAA,UAAW;YAAC,OAAO;YAAc,MAAM;YAAa,aAAa;;;;;;;;;;;AAG9E;AAEO,MAAM,UAAU","debugId":null}}]
}